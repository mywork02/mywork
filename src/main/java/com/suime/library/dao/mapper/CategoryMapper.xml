<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.suime.library.dao.CategoryMapper">
    <!--<cache flushInterval="300000" size="512" type="org.mybatis.caches.memcached.MemcachedCache"/>-->

    <resultMap id="resultMap" type="com.suime.context.model.Category">
        <id column="id" property="id"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="actived" property="actived"/>
        <result column="code" property="code"/>
        <result column="level" property="level"/>
        <result column="name" property="name"/>
        <result column="remarks" property="remarks"/>
        <result column="major_group_id" property="majorGroupId"/>
        <result column="parent_id" property="parentId"/>
    </resultMap>

    <sql id="sqlWhere">
        <if test="conds!=null">
            <trim prefix="WHERE" prefixOverrides="AND|OR">
                <foreach collection="conds.conds" index="index" item="cond">
                    ${cond.linkType}
                    <if test="cond.condType == 'EQUAL'">${cond.param} = #{cond.value}</if>
                    <if test="cond.condType == 'NOTEQUAL'">${cond.param} &lt;&gt; #{cond.value}</if>
                    <if test="cond.condType == 'GREATEQUAL'">${cond.param} &gt;= #{cond.value}</if>
                    <if test="cond.condType == 'GREATTHAN'">${cond.param} &gt; #{cond.value}</if>
                    <if test="cond.condType == 'LESSEQUAL'">${cond.param} &lt;= #{cond.value}</if>
                    <if test="cond.condType == 'LESSTHAN'">${cond.param} &lt; #{cond.value}</if>
                    <if test="cond.condType == 'BETWEEN'">${cond.param} BETWEEN #{cond.startValue} AND
                        #{cond.endValue}
                    </if>
                    <if test="cond.condType == 'ISNULL'">${cond.param} IS NULL</if>
                    <if test="cond.condType == 'NOTNULL'">${cond.param} IS NOT NULL</if>
                    <if test="cond.condType == 'LIKE'">${cond.param} LIKE #{cond.value}</if>
                    <if test="cond.condType == 'IN'">${cond.param} IN
                        <foreach item="item" index="index" collection="cond.value" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </if>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="sqlColumns">
		id, created_at, updated_at, actived, code, level, name, remarks, major_group_id, parent_id
	</sql>

    <insert id="save" parameterType="com.suime.context.model.Category" useGeneratedKeys="true" keyProperty="id">
		insert into wenku_doc_category
		(
		created_at, updated_at, actived, code, level, name, remarks, major_group_id, parent_id
		)
		values
		(
		#{createdAt, jdbcType=TIMESTAMP}, #{updatedAt, jdbcType=TIMESTAMP}, #{actived, jdbcType=TINYINT}, #{code, jdbcType=VARCHAR}, 
		#{level, jdbcType=TINYINT}, #{name, jdbcType=VARCHAR}, #{remarks, jdbcType=VARCHAR}, #{majorGroupId, jdbcType=BIGINT}, 
		#{parentId, jdbcType=BIGINT}
		)
	</insert>

    <select id="fetchById" parameterType="java.lang.Long" resultMap="resultMap">
        SELECT
        <include refid="sqlColumns"/>
        FROM wenku_doc_category t
        WHERE t.id=#{id}
    </select>

    <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT COUNT(1) FROM wenku_doc_category
        <include refid="sqlWhere"/>
    </select>

    <select id="fetchSearchByPage" parameterType="java.util.Map" resultMap="resultMap">
        <choose>
            <when test="limit>0">
                SELECT
                <include refid="sqlColumns"/>
                FROM wenku_doc_category t
                <include refid="sqlWhere"/>
                limit #{offset},#{limit}
            </when>
            <otherwise>
                SELECT
                <include refid="sqlColumns"/>
                FROM wenku_doc_category t
                <include refid="sqlWhere"/>
            </otherwise>
        </choose>
    </select>

    <update id="update" parameterType="com.suime.context.model.Category">
        update wenku_doc_category
        <set>
            <if test="id != null">
                id = #{id, jdbcType=BIGINT},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt, jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt, jdbcType=TIMESTAMP},
            </if>
            <if test="actived != null">
                actived = #{actived, jdbcType=TINYINT},
            </if>
            <if test="code != null">
                code = #{code, jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                level = #{level, jdbcType=TINYINT},
            </if>
            <if test="name != null">
                name = #{name, jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                remarks = #{remarks, jdbcType=VARCHAR},
            </if>
            <if test="majorGroupId != null">
                major_group_id = #{majorGroupId, jdbcType=BIGINT},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId, jdbcType=BIGINT},
            </if>
        </set>
        where id=#{id,jdbcType=BIGINT}
    </update>

    <delete id="delete" parameterType="java.lang.Long">
		delete from wenku_doc_category where id=#{id,jdbcType=BIGINT}
	</delete>

    <update id="updateForcibly" parameterType="com.suime.context.model.Category">
        update wenku_doc_category
        <set>
            <if test="updatedAt != null">
                updated_at = #{updatedAt, jdbcType=TIMESTAMP},
            </if>
            <if test="actived != null">
                actived = #{actived, jdbcType=TINYINT},
            </if>
            <if test="code != null">
                code = #{code, jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                level = #{level, jdbcType=TINYINT},
            </if>
            <if test="name != null">
                name = #{name, jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                remarks = #{remarks, jdbcType=VARCHAR},
            </if>
            major_group_id = #{majorGroupId, jdbcType=BIGINT},
            parent_id = #{parentId, jdbcType=BIGINT},
        </set>
        where id=#{id,jdbcType=BIGINT}
    </update>

    <select id="fetchDtoSearchByPage" parameterType="java.util.Map" resultType="com.suime.library.dto.CategoryDto">
        <choose>
            <when test="limit>0">
                SELECT t.id as id, t.level as level, t.name as name
                FROM wenku_doc_category t
                <include refid="sqlWhere"/>
                limit #{offset},#{limit}
            </when>
            <otherwise>
                SELECT t.id as id, t.level as level, t.name as name
                FROM wenku_doc_category t
                <include refid="sqlWhere"/>
            </otherwise>
        </choose>
    </select>

    <select id="statisticCountByCategory" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT t.name as categoryName ,t.id as categoryId ,t.code as categoryCode ,t.level as categoryLevel ,COUNT(sd.id) as count
		FROM wenku_doc_category t
		LEFT JOIN wenku_student_document sd ON sd.category_code LIKE CONCAT(t.code,'%')
		GROUP BY t.code
		ORDER BY count DESC
	</select>

</mapper>