<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.suime.library.dao.MarkRecordMapper">
	<!--<cache flushInterval="300000" size="512" type="org.mybatis.caches.memcached.MemcachedCache"/>-->

	<resultMap id="resultMap" type="com.suime.context.model.MarkRecord">
		<id column="id" property="id"/>
		<result column="favorite_id" property="favoriteId"/>
		<result column="student_id" property="studentId"/>
		<result column="alias" property="alias"/>
		<result column="student_nick_name" property="studentNickName"/>
		<result column="student_document_id" property="studentDocumentId"/>
		<result column="associated_id" property="associatedId"/>
		<result column="type" property="type"/>
		<result column="actived" property="actived"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
	</resultMap>

	<sql id="sqlWhere">
		<if test="conds!=null">
			<trim prefix="WHERE" prefixOverrides="AND|OR">
				<foreach collection="conds.conds" index="index" item="cond">
					${cond.linkType}
					<if test="cond.condType == 'EQUAL'">${cond.param} = #{cond.value}</if>
					<if test="cond.condType == 'NOTEQUAL'">${cond.param} &lt;&gt; #{cond.value}</if>
					<if test="cond.condType == 'GREATEQUAL'">${cond.param} &gt;= #{cond.value}</if>
					<if test="cond.condType == 'GREATTHAN'">${cond.param} &gt; #{cond.value}</if>
					<if test="cond.condType == 'LESSEQUAL'">${cond.param} &lt;= #{cond.value}</if>
					<if test="cond.condType == 'LESSTHAN'">${cond.param} &lt; #{cond.value}</if>
					<if test="cond.condType == 'BETWEEN'">${cond.param} BETWEEN #{cond.startValue} AND #{cond.endValue}</if>
					<if test="cond.condType == 'ISNULL'">${cond.param} IS NULL</if>
					<if test="cond.condType == 'NOTNULL'">${cond.param} IS NOT NULL</if>
					<if test="cond.condType == 'LIKE'">${cond.param} LIKE #{cond.value}</if>
					<if test="cond.condType == 'IN'">${cond.param} IN
						<foreach item="item" index="index" collection="cond.value" open="(" separator="," close=")">
							#{item}
						</foreach>
					</if>
				</foreach>
			</trim>
		</if>
	</sql>

	<sql id="sqlColumns">
		id, favorite_id, student_id, alias, student_nick_name, student_document_id, associated_id, type, actived, created_at, updated_at
	</sql>

	<insert id="save" parameterType="com.suime.context.model.MarkRecord" useGeneratedKeys="true" keyProperty="id">
		insert into wenku_doc_mark_record
		(
		favorite_id, student_id, alias, student_nick_name, student_document_id, associated_id, type, actived, created_at, updated_at
		)
		values
		(
		#{favoriteId, jdbcType=BIGINT}, #{studentId, jdbcType=BIGINT}, #{alias, jdbcType=VARCHAR}, #{studentNickName, jdbcType=VARCHAR}, 
		#{studentDocumentId, jdbcType=BIGINT}, #{associatedId, jdbcType=BIGINT}, #{type, jdbcType=TINYINT}, #{actived, jdbcType=TINYINT}, 
		#{createdAt, jdbcType=TIMESTAMP}, #{updatedAt, jdbcType=TIMESTAMP}
		)
	</insert>

	<select id="fetchById" parameterType="java.lang.Long" resultMap="resultMap">
		SELECT <include refid="sqlColumns" /> FROM wenku_doc_mark_record t
		WHERE t.id=#{id}
	</select>

	<select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT COUNT(1)  FROM wenku_doc_mark_record<include refid="sqlWhere" />
	</select>

	<select id="fetchSearchByPage" parameterType="java.util.Map" resultMap="resultMap">
		SELECT <include refid="sqlColumns" /> 
		FROM wenku_doc_mark_record t
		<include refid="sqlWhere" />
		<if test="sort!=null">ORDER BY ${sort.param} ${sort.type}</if>
		<if test="limit>0">limit #{offset},#{limit}</if>
	</select>

	<update id="update" parameterType="com.suime.context.model.MarkRecord">
		update wenku_doc_mark_record
		<set>
			<if test="id != null">
				id = #{id, jdbcType=BIGINT},
			</if>
			<if test="favoriteId != null">
				favorite_id = #{favoriteId, jdbcType=BIGINT},
			</if>
			<if test="studentId != null">
				student_id = #{studentId, jdbcType=BIGINT},
			</if>
			<if test="alias != null">
				alias = #{alias, jdbcType=VARCHAR},
			</if>
			<if test="studentNickName != null">
				student_nick_name = #{studentNickName, jdbcType=VARCHAR},
			</if>
			<if test="studentDocumentId != null">
				student_document_id = #{studentDocumentId, jdbcType=BIGINT},
			</if>
			<if test="associatedId != null">
				associated_id = #{associatedId, jdbcType=BIGINT},
			</if>
			<if test="type != null">
				type = #{type, jdbcType=TINYINT},
			</if>
			<if test="actived != null">
				actived = #{actived, jdbcType=TINYINT},
			</if>
			<if test="createdAt != null">
				created_at = #{createdAt, jdbcType=TIMESTAMP},
			</if>
			<if test="updatedAt != null">
				updated_at = #{updatedAt, jdbcType=TIMESTAMP},
			</if>
		</set>
		where id=#{id,jdbcType=BIGINT}
	</update>

	<delete id="delete" parameterType="java.lang.Long">
		delete from wenku_doc_mark_record where id=#{id,jdbcType=BIGINT}
	</delete>
	
	<select id="fetchMarkStudentDocumentPage" parameterType="java.util.Map" resultType="com.suime.library.dto.MarkRecordDto">
	SELECT
	m.id AS id,
	m.favorite_id AS favoriteId,
	m.student_id AS studentId,
	m.alias,
	m.student_nick_name studentNickName,
	m.student_document_id AS studentDocumentId,
	s.name AS documentName,
	m.associated_id AS associatedId,
	m.type as type,
	m.created_at as createAt,
	m.updated_at as updateAt,
 	(CASE m.type WHEN 1 THEN IFNULL(substring_index(s.file_name,".",-1),'') ELSE '' END) suffix
	FROM
	wenku_doc_mark_record m
	left join wenku_student_document s on m.type=1 and m.student_document_id = s.id
	<include refid="sqlWhere" />
	<if test="sort!=null">ORDER BY ${sort.param} ${sort.type}</if>
	<if test="limit>0">limit #{offset},#{limit}</if>
	</select>
	<select id="fetchMarkStudentDocumentPageCount" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT
    count(1)
	FROM
	wenku_doc_mark_record m
	left join wenku_student_document s on m.type=1 and m.student_document_id = s.id
	<include refid="sqlWhere" />
	</select>

	<select id="fetchMarkedStudentDocument" parameterType="java.util.Map" resultType="com.suime.library.dto.StudentDocumentDto">
		SELECT  sd.id AS id, sd.name AS name, sd.price AS price,sd.created_at AS createdAt ,mr.updated_at AS updatedAt, file.page_count AS pageCount , sd.mark_count AS markCount , sd.comment_count AS commentCount,
		sd.print_count AS printCount , sd.read_count AS readCount,sd.ratings AS ratings,sd.rating_count AS ratingCount , sd.file_key AS fileKey , sd.file_name AS fileName , mr.id AS markRecordId
		FROM wenku_doc_mark_record mr
		LEFT JOIN wenku_student_document sd ON sd.id=mr.student_document_id
		LEFT JOIN wenji_file file ON file.id=sd.file_id
		<include refid="sqlWhere" />
		ORDER BY updatedAt DESC
		<if test="limit>0">
			limit #{offset},#{limit}
		</if>
	</select>

</mapper>