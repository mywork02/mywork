<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" abstract="true">
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>

    <bean id="writeDataSource" parent="abstractDataSource">
        <property name="driverClassName" value="${datasource_w.driverClassName}"/>
        <property name="url" value="${datasource_w.url}"/>
        <property name="username" value="${datasource_w.username}"/>
        <property name="password" value="${datasource_w.password}"/>
    </bean>

    <bean id="readDataSource" parent="abstractDataSource">
        <property name="driverClassName" value="${datasource_r.driverClassName}" />
        <property name="url" value="${datasource_r.url}" />
        <property name="username" value="${datasource_r.username}" />
        <property name="password" value="${datasource_r.password}" />
    </bean>

    <bean id="readDataSource2" parent="abstractDataSource">
        <property name="driverClassName" value="${datasource_r_2.driverClassName}" />
        <property name="url" value="${datasource_r_2.url}" />
        <property name="username" value="${datasource_r_2.username}" />
        <property name="password" value="${datasource_r_2.password}" />
    </bean>

    <bean id="dataSource" class="com.confucian.framework.datasource.ReadWriteDataSource">
        <property name="writeDataSource" ref="writeDataSource" />
        <property name="readDataSourceMap">
            <map>
                <entry key="readDataSource" value-ref="readDataSource" />
                <entry key="readDataSource2" value-ref="readDataSource2" />
            </map>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" depends-on="springContext">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/suime/library/dao/mapper/*.xml"></property>
        <property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">true</prop>
                <prop key="lazyLoadingEnabled">false</prop>
                <prop key="aggressiveLazyLoading">true</prop>
                <prop key="multipleResultSetsEnabled">true</prop>
                <prop key="useColumnLabel">true</prop>
                <prop key="useGeneratedKeys">true</prop>
                <prop key="autoMappingBehavior">FULL</prop>
                <prop key="defaultExecutorType">BATCH</prop>
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.suime.library.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="readWriteDataSourceTransactionProcessor" class="com.confucian.framework.datasource.ReadWriteDataSourceProcessor">
        <property name="forceChoiceReadWhenWrite" value="false"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="is*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="page*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="search*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="reset*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="change*" propagation="REQUIRED"/>
            <tx:method name="apply*" propagation="REQUIRED"/>
            <tx:method name="flush*" propagation="NEVER"/>
            <tx:method name="make*" propagation="NOT_SUPPORTED"/>
            <tx:method name="writeLog" propagation="REQUIRES_NEW"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="(execution(* com.suime.library.service.*.*(..)) or execution(* com.confucian.mybatis.support.service..*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>

        <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">
            <aop:around pointcut-ref="txPointcut" method="determineReadOrWriteDB"/>
        </aop:aspect>
    </aop:config>

</beans>